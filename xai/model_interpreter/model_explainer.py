import numpy
from typing import List, Dict

from xai.explainer.abstract_explainer import AbstractExplainer
from xai.explainer.explainer_exceptions import ExplainerUninitializedError
from xai.model_interpreter.explanation_aggregator import ExplanationAggregator
from xai.model_interpreter.exceptions import InvalidArgumentError


class ModelExplainer:
    """
    Class for model explainer

    """

    def __init__(self, explainer: AbstractExplainer):
        """
        Initialize model explainer

        Args:
            explainer: AbstractExplainer. The explainer that implements AbstractExplainer.
                       The explainer object passed in has to be built by calling `build_explainer()`.
                       Otherwise, `ExplainerUninitializedError` will be raised.
        """
        if type(explainer) != AbstractExplainer:
            raise InvalidArgumentError('explainer', '<AbstractExplainer>')

        self._explainer = explainer
        if not explainer.explainer_object:
            raise ExplainerUninitializedError('This explainer is not yet instantiated! '
                                              'Please call build_explainer()'
                                              'first before calling explain_instance.')
        self._aggregator = ExplanationAggregator()

    def get_explanation_statistics(self, samples: List[numpy.ndarray], stats_type: str = 'top_k', k: int = 5) -> Dict:
        """
        Get statistics of explanations generated by the pre-defined explainer from given samples
        Args:
            samples: list[numpy.ndarray], not None. A list of 1D numpy array corresponding to row/single examples
            stats_type: str, not None. The pre-defined stats_type for statistical analysis.
                        For details see `xai.model_interpreter.explaination_aggregator.get_statistics()`
            k:  int, not None. the k value for `top_k` method and `average_ranking`.
                It will be ignored if the stats type are not `top_k` or `average_ranking`.
                Default value of k is 5.

        Returns:
            A dictionary maps class label to the aggregated explanation statistics.
        """
        for sample in samples:
            exp = self._explainer.explain_instance(instance=sample)
            self._aggregator.feed(explanation=exp)

        self._aggregator.get_statistics(stats_type=stats_type, k=k)
